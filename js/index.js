// Generated by CoffeeScript 1.4.0
(function() {
  var BodyForLifeTimerViewModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BodyForLifeTimerViewModel = (function() {
    var TWENTY_MINUTES_IN_SECONDS, intervalIntensities;

    TWENTY_MINUTES_IN_SECONDS = 1200;

    function BodyForLifeTimerViewModel() {
      this._tick = __bind(this._tick, this);
      this.timerGoing = ko.observable(false);
      this.startStopText = ko.computed(this._startStopText, this);
      this.startStopIcon = ko.computed(this._startStopIcon, this);
      this.timerCount = ko.observable(TWENTY_MINUTES_IN_SECONDS);
      this.timerText = ko.computed(this._timerText, this);
      this.intensityText = ko.computed(this._intensityText, this);
      this.intensityGraph = ko.computed(this._intensityGraph, this);
      this._secondIntervalHandle = setInterval(this._tick, 1000);
    }

    BodyForLifeTimerViewModel.prototype._startStopText = function() {
      if (this.timerGoing()) {
        return ' Stop';
      } else {
        return ' Start';
      }
    };

    BodyForLifeTimerViewModel.prototype._startStopIcon = function() {
      if (this.timerGoing()) {
        return 'fi-stop';
      } else {
        return 'fi-play';
      }
    };

    BodyForLifeTimerViewModel.prototype.toggleTimer = function(vm, event) {
      var going;
      going = this.timerGoing();
      return this.timerGoing(!going);
    };

    BodyForLifeTimerViewModel.prototype._timerText = function() {
      var minutes, seconds;
      seconds = this.timerCount();
      minutes = Math.floor(seconds / 60);
      seconds = seconds % 60;
      if (seconds < 10) {
        seconds = "0" + seconds;
      }
      return "" + minutes + ":" + seconds;
    };

    BodyForLifeTimerViewModel.prototype.timeToIntensity = function() {};

    intervalIntensities = [5, 10, 9, 8, 7, 6, 9, 8, 7, 6, 9, 8, 7, 6, 9, 8, 7, 6, 5, 5];

    BodyForLifeTimerViewModel.prototype._interval = function() {
      return Math.floor(this.timerCount() / 60);
    };

    BodyForLifeTimerViewModel.prototype._intensityText = function() {
      var intensity, interval;
      interval = this._interval();
      interval = Math.max(0, interval);
      interval = Math.min(intervalIntensities.length - 1, interval);
      intensity = intervalIntensities[interval];
      return intensity;
    };

    BodyForLifeTimerViewModel.prototype._intensityGraph = function() {
      var backwards;
      backwards = intervalIntensities.slice(0);
      backwards.reverse();
      return backwards.join(' ');
    };

    BodyForLifeTimerViewModel.prototype._tick = function() {
      if (this.timerGoing()) {
        this.timerCount(this.timerCount() - 1);
        if (this.timerCount() % 60 === 0) {
          return this._playIntervalChangeSound();
        }
      }
    };

    BodyForLifeTimerViewModel.prototype.addTime = function() {
      var newCount;
      newCount = Math.min(TWENTY_MINUTES_IN_SECONDS, this.timerCount() + 10);
      return this.timerCount(newCount);
    };

    BodyForLifeTimerViewModel.prototype.subtractTime = function() {
      var newCount;
      newCount = Math.max(0, this.timerCount() - 10);
      return this.timerCount(newCount);
    };

    BodyForLifeTimerViewModel.prototype._playIntervalChangeSound = function() {};

    return BodyForLifeTimerViewModel;

  })();

  $(document).ready(function() {
    var timerVM;
    timerVM = new BodyForLifeTimerViewModel();
    return ko.applyBindings(timerVM);
  });

}).call(this);
